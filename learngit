创建版本库
	初始化一个Git仓库，使用git init命令。
	添加文件到Git仓库，分两步：
		使用命令git add <file>，注意，可反复多次使用，添加多个文件；
		使用命令git commit -m <message>，完成。
时光机穿梭
	要随时掌握工作区的状态，使用git status命令。
	如果git status告诉你有文件被修改过，用git diff可以查看修改内容。
版本回退
	HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
	要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
	
	Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，
	也就是最新的提交1094adb...（注意我的提交ID和你的肯定不一样），
	上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
	
工作区和暂存区
	git add命令实际上就是把要提交的所有修改放到暂存区（Stage）然后，执行git commit就可以一次性把暂存区的所有修改提交到分支。
管理修改
	用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
	每次修改，如果不用git add到暂存区，那就不会加入到commit中。
撤销修改
	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，
	就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节（git reset --hard commit_id），不过前提是没有推送到远程库。
删除文件
	命令git rm用于删除一个文件
	git checkout -- file其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”
添加远程库
添加远程库
	要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
	关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
	此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；